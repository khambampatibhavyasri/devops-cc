name: Campus Connect CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  GAR_LOCATION: asia-south1
  REPOSITORY: campusconnect-repo
  FRONTEND_IMAGE: campusconnect-frontend
  BACKEND_IMAGE: campusconnect-backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          cc/package-lock.json
          server/package-lock.json

    - name: Install Frontend Dependencies
      working-directory: ./cc
      run: npm ci

    - name: Install Backend Dependencies
      working-directory: ./server
      run: npm ci

    - name: Run Frontend Tests
      working-directory: ./cc
      run: |
        npm run test -- --coverage --watchAll=false
      continue-on-error: true

    - name: Run Backend Tests
      working-directory: ./server
      run: |
        npm test
      continue-on-error: true

    - name: Lint Frontend Code
      working-directory: ./cc
      run: |
        npm run lint || echo "Linting completed with warnings"
      continue-on-error: true

  trigger-jenkins:
    name: Trigger Jenkins Build
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Trigger Jenkins Job
      run: |
        curl -X POST \
          -u ${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }} \
          "${{ secrets.JENKINS_URL }}/job/campusconnect-pipeline/build" \
          --data-urlencode "token=github-trigger" \
          --data-urlencode "cause=GitHub commit by ${{ github.actor }}"

  build-and-deploy:
    name: Build and Deploy to GKE
    needs: [test, trigger-jenkins]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure Docker for Artifact Registry
      run: gcloud --quiet auth configure-docker $GAR_LOCATION-docker.pkg.dev

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True

    - name: Build Frontend Docker Image
      run: |
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$FRONTEND_IMAGE:$GITHUB_SHA" \
          -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$FRONTEND_IMAGE:latest" \
          -f cc/Dockerfile cc/

    - name: Build Backend Docker Image
      run: |
        docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$BACKEND_IMAGE:$GITHUB_SHA" \
          -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$BACKEND_IMAGE:latest" \
          -f server/Dockerfile server/

    - name: Push Images to Artifact Registry
      run: |
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$FRONTEND_IMAGE:$GITHUB_SHA"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$FRONTEND_IMAGE:latest"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$BACKEND_IMAGE:$GITHUB_SHA"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$BACKEND_IMAGE:latest"

    - name: Update Kubernetes Manifests
      run: |
        sed -i "s|campusconnect-frontend:latest|$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$FRONTEND_IMAGE:$GITHUB_SHA|g" k8s/frontend-deployment.yaml
        sed -i "s|campusconnect-backend:latest|$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$BACKEND_IMAGE:$GITHUB_SHA|g" k8s/backend-deployment.yaml

    - name: Deploy to GKE
      run: |
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/backend-deployment.yaml
        kubectl apply -f k8s/frontend-deployment.yaml

        # Wait for rollout to complete
        kubectl rollout status deployment/backend --timeout=300s
        kubectl rollout status deployment/frontend --timeout=300s
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True

    - name: Get Service URLs
      run: |
        echo "Getting service information..."
        kubectl get services
        echo ""
        echo "Frontend URL: http://$(kubectl get service frontend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):30000"
        echo "Backend URL: http://$(kubectl get service backend-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):30001"
      env:
        USE_GKE_GCLOUD_AUTH_PLUGIN: True

  notify:
    name: Notify Deployment Status
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Deployment Success Notification
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ Campus Connect deployed successfully!"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"

    - name: Deployment Failure Notification
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ Campus Connect deployment failed!"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"